###################################################################
##
## Name     : init_dma
## Desc     : Microprocessor Peripheral Description
##          : Automatically generated by PsfUtility
##
###################################################################

BEGIN init_dma

## Peripheral Options
OPTION IPTYPE = PERIPHERAL
OPTION IMP_NETLIST = TRUE
OPTION STYLE = HDL
OPTION DESC = INIT_DMA
OPTION HDL = MIXED
OPTION RUN_NGCBUILD = FALSE


## Bus Interfaces
BUS_INTERFACE BUS = S_AXI, BUS_STD = AXI, BUS_TYPE = SLAVE
BUS_INTERFACE BUS = S1_AXI, BUS_STD = AXI, BUS_TYPE = SLAVE
BUS_INTERFACE BUS = M_AXI, BUS_STD = AXI, BUS_TYPE = MASTER

## Generics for VHDL or Parameters for Verilog
PARAMETER C_S_AXI_DATA_WIDTH = 32, DT = INTEGER, BUS = S_AXI, ASSIGNMENT = CONSTANT
PARAMETER C_S_AXI_ADDR_WIDTH = 32, DT = INTEGER, BUS = S_AXI, ASSIGNMENT = CONSTANT
PARAMETER C_S_AXI_MIN_SIZE = 0x000001ff, DT = std_logic_vector, BUS = S_AXI
PARAMETER C_USE_WSTRB = 0, DT = INTEGER
PARAMETER C_DPHASE_TIMEOUT = 8, DT = INTEGER
PARAMETER C_BASEADDR = 0xffffffff, DT = std_logic_vector, MIN_SIZE = 0x100, PAIR = C_HIGHADDR, ADDRESS = BASE, BUS = S_AXI
PARAMETER C_HIGHADDR = 0x00000000, DT = std_logic_vector, PAIR = C_BASEADDR, ADDRESS = HIGH, BUS = S_AXI
PARAMETER C_FAMILY = virtex6, DT = STRING
PARAMETER C_NUM_REG = 1, DT = INTEGER
PARAMETER C_NUM_MEM = 1, DT = INTEGER
PARAMETER C_SLV_AWIDTH = 32, DT = INTEGER
PARAMETER C_SLV_DWIDTH = 32, DT = INTEGER
PARAMETER C_S_AXI_PROTOCOL = AXI4LITE, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, DT = STRING, BUS = S_AXI
## Generics for VHDL Master or Parameters for Verilog
PARAMETER C_M_AXI_ADDR_WIDTH = 32, DT = integer, ASSIGNMENT = CONSTANT, BUS = M_AXI
PARAMETER C_M_AXI_DATA_WIDTH = 32, DT = integer, ASSIGNMENT = CONSTANT, BUS = M_AXI
PARAMETER C_M_AXI_PROTOCOL = AXI4Lite, DT = string, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, BUS = M_AXI
PARAMETER C_M_AXI_SUPPORTS_READ = 1, DT = integer, ASSIGNMENT = CONSTANT, TYPE = NON_HDL, BUS = M_AXI
PARAMETER C_M_AXI_SUPPORTS_WRITE = 1, DT = integer, ASSIGNMENT = CONSTANT, TYPE = NON_HDL, BUS = M_AXI

##stas
PARAMETER C_S1_AXI_ADDR_WIDTH = 7, DT = integer, ASSIGNMENT = CONSTANT, BUS = S_AXI
PARAMETER C_S1_AXI_DATA_WIDTH = 32, DT = integer, ASSIGNMENT = CONSTANT, BUS = S_AXI
PARAMETER C_S1_AXI_PROTOCOL = AXI4Lite, DT = string, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, BUS = S_AXI
PARAMETER C_S1_AXI_SUPPORTS_READ = 1, DT = integer, RANGE = (0,1), TYPE = NON_HDL, ASSIGNMENT = OPTIONAL_UPDATE, BUS = S_AXI
PARAMETER C_S1_AXI_SUPPORTS_WRITE = 1, DT = integer, RANGE = (0,1), TYPE = NON_HDL, ASSIGNMENT = OPTIONAL_UPDATE, BUS = S_AXI
PARAMETER C_S1_AXI_NUM_ADDR_RANGES = 1, BUS = S_AXI, DT = INTEGER, ASSIGNMENT = OPTIONAL_UPDATE, TYPE = NON_HDL, RANGE = (1:4)
PARAMETER C_S1_AXI_RNG00_BASEADDR = 0xFFFFFFFF, BUS = S_AXI, DT = std_logic_vector, ADDRESS = BASE, PAIR = C_S1_AXI_RNG00_HIGHADDR, ISVALID = (C_S_AXI_NUM_ADDR_RANGES >= 1), TYPE = NON_HDL, MIN_SIZE = 0x1000
PARAMETER C_S1_AXI_RNG00_HIGHADDR = 0x00000000, BUS = S_AXI, DT = std_logic_vector, ADDRESS = HIGH, PAIR = C_S1_AXI_RNG00_BASEADDR, ISVALID = (C_S_AXI_NUM_ADDR_RANGES >= 1), TYPE = NON_HDL
PARAMETER C_S1_AXI_RNG01_BASEADDR = 0xFFFFFFFF, BUS = S_AXI, DT = std_logic_vector, ADDRESS = BASE, PAIR = C_S1_AXI_RNG01_HIGHADDR, ISVALID = (C_S_AXI_NUM_ADDR_RANGES >= 2), TYPE = NON_HDL, MIN_SIZE = 0x1000
PARAMETER C_S1_AXI_RNG01_HIGHADDR = 0x00000000, BUS = S_AXI, DT = std_logic_vector, ADDRESS = HIGH, PAIR = C_S1_AXI_RNG01_BASEADDR, ISVALID = (C_S_AXI_NUM_ADDR_RANGES >= 2), TYPE = NON_HDL
PARAMETER C_S1_AXI_RNG02_BASEADDR = 0xFFFFFFFF, BUS = S_AXI, DT = std_logic_vector, ADDRESS = BASE, PAIR = C_S1_AXI_RNG02_HIGHADDR, ISVALID = (C_S_AXI_NUM_ADDR_RANGES >= 3), TYPE = NON_HDL, MIN_SIZE = 0x1000
PARAMETER C_S1_AXI_RNG02_HIGHADDR = 0x00000000, BUS = S_AXI, DT = std_logic_vector, ADDRESS = HIGH, PAIR = C_S1_AXI_RNG02_BASEADDR, ISVALID = (C_S_AXI_NUM_ADDR_RANGES >= 3), TYPE = NON_HDL
PARAMETER C_S1_AXI_RNG03_BASEADDR = 0xFFFFFFFF, BUS = S_AXI, DT = std_logic_vector, ADDRESS = BASE, PAIR = C_S1_AXI_RNG03_HIGHADDR, ISVALID = (C_S_AXI_NUM_ADDR_RANGES >= 4), TYPE = NON_HDL, MIN_SIZE = 0x1000
PARAMETER C_S1_AXI_RNG03_HIGHADDR = 0x00000000, BUS = S_AXI, DT = std_logic_vector, ADDRESS = HIGH, PAIR = C_S1_AXI_RNG03_BASEADDR, ISVALID = (C_S_AXI_NUM_ADDR_RANGES >= 4), TYPE = NON_HDL
PARAMETER C_S1_AXI_RNG04_BASEADDR = 0xFFFFFFFF, BUS = S_AXI, DT = std_logic_vector, ADDRESS = BASE, PAIR = C_S1_AXI_RNG04_HIGHADDR, ISVALID = (C_S_AXI_NUM_ADDR_RANGES >= 5), TYPE = NON_HDL, MIN_SIZE = 0x1000
PARAMETER C_S1_AXI_RNG04_HIGHADDR = 0x00000000, BUS = S_AXI, DT = std_logic_vector, ADDRESS = HIGH, PAIR = C_S1_AXI_RNG04_BASEADDR, ISVALID = (C_S_AXI_NUM_ADDR_RANGES >= 5), TYPE = NON_HDL
PARAMETER C_S1_AXI_RNG05_BASEADDR = 0xFFFFFFFF, BUS = S_AXI, DT = std_logic_vector, ADDRESS = BASE, PAIR = C_S1_AXI_RNG05_HIGHADDR, ISVALID = (C_S_AXI_NUM_ADDR_RANGES >= 6), TYPE = NON_HDL, MIN_SIZE = 0x1000
PARAMETER C_S1_AXI_RNG05_HIGHADDR = 0x00000000, BUS = S_AXI, DT = std_logic_vector, ADDRESS = HIGH, PAIR = C_S1_AXI_RNG05_BASEADDR, ISVALID = (C_S_AXI_NUM_ADDR_RANGES >= 6), TYPE = NON_HDL
PARAMETER C_S1_AXI_RNG06_BASEADDR = 0xFFFFFFFF, BUS = S_AXI, DT = std_logic_vector, ADDRESS = BASE, PAIR = C_S1_AXI_RNG06_HIGHADDR, ISVALID = (C_S_AXI_NUM_ADDR_RANGES >= 7), TYPE = NON_HDL, MIN_SIZE = 0x1000
PARAMETER C_S1_AXI_RNG06_HIGHADDR = 0x00000000, BUS = S_AXI, DT = std_logic_vector, ADDRESS = HIGH, PAIR = C_S1_AXI_RNG06_BASEADDR, ISVALID = (C_S_AXI_NUM_ADDR_RANGES >= 7), TYPE = NON_HDL
PARAMETER C_S1_AXI_RNG07_BASEADDR = 0xFFFFFFFF, BUS = S_AXI, DT = std_logic_vector, ADDRESS = BASE, PAIR = C_S1_AXI_RNG07_HIGHADDR, ISVALID = (C_S_AXI_NUM_ADDR_RANGES >= 8), TYPE = NON_HDL, MIN_SIZE = 0x1000
PARAMETER C_S1_AXI_RNG07_HIGHADDR = 0x00000000, BUS = S_AXI, DT = std_logic_vector, ADDRESS = HIGH, PAIR = C_S1_AXI_RNG07_BASEADDR, ISVALID = (C_S_AXI_NUM_ADDR_RANGES >= 8), TYPE = NON_HDL
PARAMETER C_S1_AXI_RNG08_BASEADDR = 0xFFFFFFFF, BUS = S_AXI, DT = std_logic_vector, ADDRESS = BASE, PAIR = C_S1_AXI_RNG08_HIGHADDR, ISVALID = (C_S_AXI_NUM_ADDR_RANGES >= 9), TYPE = NON_HDL, MIN_SIZE = 0x1000
PARAMETER C_S1_AXI_RNG08_HIGHADDR = 0x00000000, BUS = S_AXI, DT = std_logic_vector, ADDRESS = HIGH, PAIR = C_S1_AXI_RNG08_BASEADDR, ISVALID = (C_S_AXI_NUM_ADDR_RANGES >= 9), TYPE = NON_HDL
PARAMETER C_S1_AXI_RNG09_BASEADDR = 0xFFFFFFFF, BUS = S_AXI, DT = std_logic_vector, ADDRESS = BASE, PAIR = C_S1_AXI_RNG09_HIGHADDR, ISVALID = (C_S_AXI_NUM_ADDR_RANGES >= 10), TYPE = NON_HDL, MIN_SIZE = 0x1000
PARAMETER C_S1_AXI_RNG09_HIGHADDR = 0x00000000, BUS = S_AXI, DT = std_logic_vector, ADDRESS = HIGH, PAIR = C_S1_AXI_RNG09_BASEADDR, ISVALID = (C_S_AXI_NUM_ADDR_RANGES >= 10), TYPE = NON_HDL
PARAMETER C_S1_AXI_RNG10_BASEADDR = 0xFFFFFFFF, BUS = S_AXI, DT = std_logic_vector, ADDRESS = BASE, PAIR = C_S1_AXI_RNG10_HIGHADDR, ISVALID = (C_S_AXI_NUM_ADDR_RANGES >= 11), TYPE = NON_HDL, MIN_SIZE = 0x1000
PARAMETER C_S1_AXI_RNG10_HIGHADDR = 0x00000000, BUS = S_AXI, DT = std_logic_vector, ADDRESS = HIGH, PAIR = C_S1_AXI_RNG10_BASEADDR, ISVALID = (C_S_AXI_NUM_ADDR_RANGES >= 11), TYPE = NON_HDL
PARAMETER C_S1_AXI_RNG11_BASEADDR = 0xFFFFFFFF, BUS = S_AXI, DT = std_logic_vector, ADDRESS = BASE, PAIR = C_S1_AXI_RNG11_HIGHADDR, ISVALID = (C_S_AXI_NUM_ADDR_RANGES >= 12), TYPE = NON_HDL, MIN_SIZE = 0x1000
PARAMETER C_S1_AXI_RNG11_HIGHADDR = 0x00000000, BUS = S_AXI, DT = std_logic_vector, ADDRESS = HIGH, PAIR = C_S1_AXI_RNG11_BASEADDR, ISVALID = (C_S_AXI_NUM_ADDR_RANGES >= 12), TYPE = NON_HDL
PARAMETER C_S1_AXI_RNG12_BASEADDR = 0xFFFFFFFF, BUS = S_AXI, DT = std_logic_vector, ADDRESS = BASE, PAIR = C_S1_AXI_RNG12_HIGHADDR, ISVALID = (C_S_AXI_NUM_ADDR_RANGES >= 13), TYPE = NON_HDL, MIN_SIZE = 0x1000
PARAMETER C_S1_AXI_RNG12_HIGHADDR = 0x00000000, BUS = S_AXI, DT = std_logic_vector, ADDRESS = HIGH, PAIR = C_S1_AXI_RNG12_BASEADDR, ISVALID = (C_S_AXI_NUM_ADDR_RANGES >= 13), TYPE = NON_HDL
PARAMETER C_S1_AXI_RNG13_BASEADDR = 0xFFFFFFFF, BUS = S_AXI, DT = std_logic_vector, ADDRESS = BASE, PAIR = C_S1_AXI_RNG13_HIGHADDR, ISVALID = (C_S_AXI_NUM_ADDR_RANGES >= 14), TYPE = NON_HDL, MIN_SIZE = 0x1000
PARAMETER C_S1_AXI_RNG13_HIGHADDR = 0x00000000, BUS = S_AXI, DT = std_logic_vector, ADDRESS = HIGH, PAIR = C_S1_AXI_RNG13_BASEADDR, ISVALID = (C_S_AXI_NUM_ADDR_RANGES >= 14), TYPE = NON_HDL
PARAMETER C_S1_AXI_RNG14_BASEADDR = 0xFFFFFFFF, BUS = S_AXI, DT = std_logic_vector, ADDRESS = BASE, PAIR = C_S1_AXI_RNG14_HIGHADDR, ISVALID = (C_S_AXI_NUM_ADDR_RANGES >= 15), TYPE = NON_HDL, MIN_SIZE = 0x1000
PARAMETER C_S1_AXI_RNG14_HIGHADDR = 0x00000000, BUS = S_AXI, DT = std_logic_vector, ADDRESS = HIGH, PAIR = C_S1_AXI_RNG14_BASEADDR, ISVALID = (C_S_AXI_NUM_ADDR_RANGES >= 15), TYPE = NON_HDL
PARAMETER C_S1_AXI_RNG15_BASEADDR = 0xFFFFFFFF, BUS = S_AXI, DT = std_logic_vector, ADDRESS = BASE, PAIR = C_S1_AXI_RNG15_HIGHADDR, ISVALID = (C_S_AXI_NUM_ADDR_RANGES >= 16), TYPE = NON_HDL, MIN_SIZE = 0x1000
PARAMETER C_S1_AXI_RNG15_HIGHADDR = 0x00000000, BUS = S_AXI, DT = std_logic_vector, ADDRESS = HIGH, PAIR = C_S1_AXI_RNG15_BASEADDR, ISVALID = (C_S_AXI_NUM_ADDR_RANGES >= 16), TYPE = NON_HDL
PARAMETER C_S1_AXI_RNG16_BASEADDR = 0xFFFFFFFF, BUS = S_AXI, DT = std_logic_vector, ADDRESS = BASE, PAIR = C_S1_AXI_RNG16_HIGHADDR, ISVALID = (C_S_AXI_NUM_ADDR_RANGES >= 17), TYPE = NON_HDL, MIN_SIZE = 0x1000
PARAMETER C_S1_AXI_RNG16_HIGHADDR = 0x00000000, BUS = S_AXI, DT = std_logic_vector, ADDRESS = HIGH, PAIR = C_S1_AXI_RNG16_BASEADDR, ISVALID = (C_S_AXI_NUM_ADDR_RANGES >= 17), TYPE = NON_HDL
PARAMETER C_S1_AXI_RNG17_BASEADDR = 0xFFFFFFFF, BUS = S_AXI, DT = std_logic_vector, ADDRESS = BASE, PAIR = C_S1_AXI_RNG17_HIGHADDR, ISVALID = (C_S_AXI_NUM_ADDR_RANGES >= 18), TYPE = NON_HDL, MIN_SIZE = 0x1000
PARAMETER C_S1_AXI_RNG17_HIGHADDR = 0x00000000, BUS = S_AXI, DT = std_logic_vector, ADDRESS = HIGH, PAIR = C_S1_AXI_RNG17_BASEADDR, ISVALID = (C_S_AXI_NUM_ADDR_RANGES >= 18), TYPE = NON_HDL
PARAMETER C_S1_AXI_RNG18_BASEADDR = 0xFFFFFFFF, BUS = S_AXI, DT = std_logic_vector, ADDRESS = BASE, PAIR = C_S1_AXI_RNG18_HIGHADDR, ISVALID = (C_S_AXI_NUM_ADDR_RANGES >= 19), TYPE = NON_HDL, MIN_SIZE = 0x1000
PARAMETER C_S1_AXI_RNG18_HIGHADDR = 0x00000000, BUS = S_AXI, DT = std_logic_vector, ADDRESS = HIGH, PAIR = C_S1_AXI_RNG18_BASEADDR, ISVALID = (C_S_AXI_NUM_ADDR_RANGES >= 19), TYPE = NON_HDL
PARAMETER C_S1_AXI_RNG19_BASEADDR = 0xFFFFFFFF, BUS = S_AXI, DT = std_logic_vector, ADDRESS = BASE, PAIR = C_S1_AXI_RNG19_HIGHADDR, ISVALID = (C_S_AXI_NUM_ADDR_RANGES >= 20), TYPE = NON_HDL, MIN_SIZE = 0x1000
PARAMETER C_S1_AXI_RNG19_HIGHADDR = 0x00000000, BUS = S_AXI, DT = std_logic_vector, ADDRESS = HIGH, PAIR = C_S1_AXI_RNG19_BASEADDR, ISVALID = (C_S_AXI_NUM_ADDR_RANGES >= 20), TYPE = NON_HDL
PARAMETER C_S1_AXI_RNG20_BASEADDR = 0xFFFFFFFF, BUS = S_AXI, DT = std_logic_vector, ADDRESS = BASE, PAIR = C_S1_AXI_RNG20_HIGHADDR, ISVALID = (C_S_AXI_NUM_ADDR_RANGES >= 21), TYPE = NON_HDL, MIN_SIZE = 0x1000
PARAMETER C_S1_AXI_RNG20_HIGHADDR = 0x00000000, BUS = S_AXI, DT = std_logic_vector, ADDRESS = HIGH, PAIR = C_S1_AXI_RNG20_BASEADDR, ISVALID = (C_S_AXI_NUM_ADDR_RANGES >= 21), TYPE = NON_HDL
PARAMETER C_S1_AXI_RNG21_BASEADDR = 0xFFFFFFFF, BUS = S_AXI, DT = std_logic_vector, ADDRESS = BASE, PAIR = C_S1_AXI_RNG21_HIGHADDR, ISVALID = (C_S_AXI_NUM_ADDR_RANGES >= 22), TYPE = NON_HDL, MIN_SIZE = 0x1000
PARAMETER C_S1_AXI_RNG21_HIGHADDR = 0x00000000, BUS = S_AXI, DT = std_logic_vector, ADDRESS = HIGH, PAIR = C_S1_AXI_RNG21_BASEADDR, ISVALID = (C_S_AXI_NUM_ADDR_RANGES >= 22), TYPE = NON_HDL
PARAMETER C_S1_AXI_RNG22_BASEADDR = 0xFFFFFFFF, BUS = S_AXI, DT = std_logic_vector, ADDRESS = BASE, PAIR = C_S1_AXI_RNG22_HIGHADDR, ISVALID = (C_S_AXI_NUM_ADDR_RANGES >= 23), TYPE = NON_HDL, MIN_SIZE = 0x1000
PARAMETER C_S1_AXI_RNG22_HIGHADDR = 0x00000000, BUS = S_AXI, DT = std_logic_vector, ADDRESS = HIGH, PAIR = C_S1_AXI_RNG22_BASEADDR, ISVALID = (C_S_AXI_NUM_ADDR_RANGES >= 23), TYPE = NON_HDL
PARAMETER C_S1_AXI_RNG23_BASEADDR = 0xFFFFFFFF, BUS = S_AXI, DT = std_logic_vector, ADDRESS = BASE, PAIR = C_S1_AXI_RNG23_HIGHADDR, ISVALID = (C_S_AXI_NUM_ADDR_RANGES >= 24), TYPE = NON_HDL, MIN_SIZE = 0x1000
PARAMETER C_S1_AXI_RNG23_HIGHADDR = 0x00000000, BUS = S_AXI, DT = std_logic_vector, ADDRESS = HIGH, PAIR = C_S1_AXI_RNG23_BASEADDR, ISVALID = (C_S_AXI_NUM_ADDR_RANGES >= 24), TYPE = NON_HDL
PARAMETER C_S1_AXI_RNG24_BASEADDR = 0xFFFFFFFF, BUS = S_AXI, DT = std_logic_vector, ADDRESS = BASE, PAIR = C_S1_AXI_RNG24_HIGHADDR, ISVALID = (C_S_AXI_NUM_ADDR_RANGES >= 25), TYPE = NON_HDL, MIN_SIZE = 0x1000
PARAMETER C_S1_AXI_RNG24_HIGHADDR = 0x00000000, BUS = S_AXI, DT = std_logic_vector, ADDRESS = HIGH, PAIR = C_S1_AXI_RNG24_BASEADDR, ISVALID = (C_S_AXI_NUM_ADDR_RANGES >= 25), TYPE = NON_HDL
PARAMETER C_S1_AXI_RNG25_BASEADDR = 0xFFFFFFFF, BUS = S_AXI, DT = std_logic_vector, ADDRESS = BASE, PAIR = C_S1_AXI_RNG25_HIGHADDR, ISVALID = (C_S_AXI_NUM_ADDR_RANGES >= 26), TYPE = NON_HDL, MIN_SIZE = 0x1000
PARAMETER C_S1_AXI_RNG25_HIGHADDR = 0x00000000, BUS = S_AXI, DT = std_logic_vector, ADDRESS = HIGH, PAIR = C_S1_AXI_RNG25_BASEADDR, ISVALID = (C_S_AXI_NUM_ADDR_RANGES >= 26), TYPE = NON_HDL
PARAMETER C_S1_AXI_RNG26_BASEADDR = 0xFFFFFFFF, BUS = S_AXI, DT = std_logic_vector, ADDRESS = BASE, PAIR = C_S1_AXI_RNG26_HIGHADDR, ISVALID = (C_S_AXI_NUM_ADDR_RANGES >= 27), TYPE = NON_HDL, MIN_SIZE = 0x1000
PARAMETER C_S1_AXI_RNG26_HIGHADDR = 0x00000000, BUS = S_AXI, DT = std_logic_vector, ADDRESS = HIGH, PAIR = C_S1_AXI_RNG26_BASEADDR, ISVALID = (C_S_AXI_NUM_ADDR_RANGES >= 27), TYPE = NON_HDL
PARAMETER C_S1_AXI_RNG27_BASEADDR = 0xFFFFFFFF, BUS = S_AXI, DT = std_logic_vector, ADDRESS = BASE, PAIR = C_S1_AXI_RNG27_HIGHADDR, ISVALID = (C_S_AXI_NUM_ADDR_RANGES >= 28), TYPE = NON_HDL, MIN_SIZE = 0x1000
PARAMETER C_S1_AXI_RNG27_HIGHADDR = 0x00000000, BUS = S_AXI, DT = std_logic_vector, ADDRESS = HIGH, PAIR = C_S1_AXI_RNG27_BASEADDR, ISVALID = (C_S_AXI_NUM_ADDR_RANGES >= 28), TYPE = NON_HDL
PARAMETER C_S1_AXI_RNG28_BASEADDR = 0xFFFFFFFF, BUS = S_AXI, DT = std_logic_vector, ADDRESS = BASE, PAIR = C_S1_AXI_RNG28_HIGHADDR, ISVALID = (C_S_AXI_NUM_ADDR_RANGES >= 29), TYPE = NON_HDL, MIN_SIZE = 0x1000
PARAMETER C_S1_AXI_RNG28_HIGHADDR = 0x00000000, BUS = S_AXI, DT = std_logic_vector, ADDRESS = HIGH, PAIR = C_S1_AXI_RNG28_BASEADDR, ISVALID = (C_S_AXI_NUM_ADDR_RANGES >= 29), TYPE = NON_HDL
PARAMETER C_S1_AXI_RNG29_BASEADDR = 0xFFFFFFFF, BUS = S_AXI, DT = std_logic_vector, ADDRESS = BASE, PAIR = C_S1_AXI_RNG29_HIGHADDR, ISVALID = (C_S_AXI_NUM_ADDR_RANGES >= 30), TYPE = NON_HDL, MIN_SIZE = 0x1000
PARAMETER C_S1_AXI_RNG29_HIGHADDR = 0x00000000, BUS = S_AXI, DT = std_logic_vector, ADDRESS = HIGH, PAIR = C_S1_AXI_RNG29_BASEADDR, ISVALID = (C_S_AXI_NUM_ADDR_RANGES >= 30), TYPE = NON_HDL
PARAMETER C_S1_AXI_RNG30_BASEADDR = 0xFFFFFFFF, BUS = S_AXI, DT = std_logic_vector, ADDRESS = BASE, PAIR = C_S1_AXI_RNG30_HIGHADDR, ISVALID = (C_S_AXI_NUM_ADDR_RANGES >= 31), TYPE = NON_HDL, MIN_SIZE = 0x1000
PARAMETER C_S1_AXI_RNG30_HIGHADDR = 0x00000000, BUS = S_AXI, DT = std_logic_vector, ADDRESS = HIGH, PAIR = C_S1_AXI_RNG30_BASEADDR, ISVALID = (C_S_AXI_NUM_ADDR_RANGES >= 31), TYPE = NON_HDL
PARAMETER C_S1_AXI_RNG31_BASEADDR = 0xFFFFFFFF, BUS = S_AXI, DT = std_logic_vector, ADDRESS = BASE, PAIR = C_S1_AXI_RNG31_HIGHADDR, ISVALID = (C_S_AXI_NUM_ADDR_RANGES >= 32), TYPE = NON_HDL, MIN_SIZE = 0x1000
PARAMETER C_S1_AXI_RNG31_HIGHADDR = 0x00000000, BUS = S_AXI, DT = std_logic_vector, ADDRESS = HIGH, PAIR = C_S1_AXI_RNG31_BASEADDR, ISVALID = (C_S_AXI_NUM_ADDR_RANGES >= 32), TYPE = NON_HDL

## Ports
PORT S_AXI_ACLK = "", DIR = I, SIGIS = CLK, BUS = S_AXI
PORT S_AXI_ARESETN = ARESETN, DIR = I, SIGIS = RST, BUS = S_AXI
PORT S_AXI_AWADDR = AWADDR, DIR = I, VEC = [(C_S_AXI_ADDR_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_AWVALID = AWVALID, DIR = I, BUS = S_AXI
PORT S_AXI_WDATA = WDATA, DIR = I, VEC = [(C_S_AXI_DATA_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_WSTRB = WSTRB, DIR = I, VEC = [((C_S_AXI_DATA_WIDTH/8)-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_WVALID = WVALID, DIR = I, BUS = S_AXI
PORT S_AXI_BREADY = BREADY, DIR = I, BUS = S_AXI
PORT S_AXI_ARADDR = ARADDR, DIR = I, VEC = [(C_S_AXI_ADDR_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_ARVALID = ARVALID, DIR = I, BUS = S_AXI
PORT S_AXI_RREADY = RREADY, DIR = I, BUS = S_AXI
PORT S_AXI_ARREADY = ARREADY, DIR = O, BUS = S_AXI
PORT S_AXI_RDATA = RDATA, DIR = O, VEC = [(C_S_AXI_DATA_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_RRESP = RRESP, DIR = O, VEC = [1:0], BUS = S_AXI
PORT S_AXI_RVALID = RVALID, DIR = O, BUS = S_AXI
PORT S_AXI_WREADY = WREADY, DIR = O, BUS = S_AXI
PORT S_AXI_BRESP = BRESP, DIR = O, VEC = [1:0], BUS = S_AXI
PORT S_AXI_BVALID = BVALID, DIR = O, BUS = S_AXI
PORT S_AXI_AWREADY = AWREADY, DIR = O, BUS = S_AXI

## Ports stas
PORT S1_AXI_ACLK = "", BUS = S1_AXI, DIR = I, SIGIS = CLK
PORT S1_AXI_ARESETN = ARESETN, BUS = S1_AXI, DIR = I, SIGIS = RST
PORT S_AXI_AWADDR = AWADDR, BUS = S1_AXI, DIR = I, VEC = [(C_S1_AXI_ADDR_WIDTH-1):0]
PORT S_AXI_AWPROT = AWPROT, BUS = S1_AXI, DIR = I, VEC = [2:0]
PORT S_AXI_AWVALID = AWVALID, BUS = S1_AXI, DIR = I
PORT S_AXI_AWREADY = AWREADY, BUS = S1_AXI, DIR = O
PORT S_AXI_WDATA = WDATA, BUS = S_AXI, DIR = I, VEC = [(C_S_AXI_DATA_WIDTH-1):0]
PORT S_AXI_WSTRB = WSTRB, BUS = S_AXI, DIR = I, VEC = [((C_S_AXI_DATA_WIDTH/8) -1):0]
PORT S_AXI_WVALID = WVALID, BUS = S_AXI, DIR = I
PORT S_AXI_WREADY = WREADY, BUS = S_AXI, DIR = O
PORT S_AXI_BRESP = BRESP, BUS = S_AXI, DIR = O, VEC = [1:0]
PORT S_AXI_BVALID = BVALID, BUS = S_AXI, DIR = O
PORT S_AXI_BREADY = BREADY, BUS = S_AXI, DIR = I
PORT S_AXI_ARADDR = ARADDR, BUS = S_AXI, DIR = I, VEC = [(C_S_AXI_ADDR_WIDTH-1):0
PORT S_AXI_ARPROT = ARPROT, BUS = S_AXI, DIR = I, VEC = [2:0]
PORT S_AXI_ARVALID = ARVALID, BUS = S_AXI, DIR = I
PORT S_AXI_ARREADY = ARREADY, BUS = S_AXI, DIR = O
PORT S_AXI_RDATA = RDATA, BUS = S_AXI, DIR = O, VEC = [(C_S_AXI_DATA_WIDTH-1):0]
PORT S_AXI_RRESP = RRESP, BUS = S_AXI, DIR = O, VEC = [1:0]
PORT S_AXI_RVALID = RVALID, BUS = S_AXI, DIR = O
PORT S_AXI_RREADY = RREADY, BUS = S_AXI, DIR = I


## Ports Master
PORT M_AXI_ACLK = "", BUS = M_AXI, DIR = I, SIGIS = CLK
PORT M_AXI_ARESETN = ARESETN, BUS = M_AXI, DIR = I, SIGIS = RST
PORT M_AXI_AWADDR = AWADDR, BUS = M_AXI, DIR = O, VEC = [(C_M_AXI_ADDR_WIDTH-1):0]
PORT M_AXI_AWPROT = AWPROT, BUS = M_AXI, DIR = O, VEC = [2:0]
PORT M_AXI_AWVALID = AWVALID, BUS = M_AXI, DIR = O
PORT M_AXI_AWREADY = AWREADY, BUS = M_AXI, DIR = I
PORT M_AXI_WDATA = WDATA, BUS = M_AXI, DIR = O, VEC = [(C_M_AXI_DATA_WIDTH-1):0]
PORT M_AXI_WSTRB = WSTRB, BUS = M_AXI, DIR = O, VEC = [((C_M_AXI_DATA_WIDTH/8) -1):0]
PORT M_AXI_WVALID = WVALID, BUS = M_AXI, DIR = O
PORT M_AXI_WREADY = WREADY, BUS = M_AXI, DIR = I
PORT M_AXI_BRESP = BRESP, BUS = M_AXI, DIR = I, VEC = [1:0]
PORT M_AXI_BVALID = BVALID, BUS = M_AXI, DIR = I
PORT M_AXI_BREADY = BREADY, BUS = M_AXI, DIR = O
PORT M_AXI_ARADDR = ARADDR, BUS = M_AXI, DIR = O, VEC = [(C_M_AXI_ADDR_WIDTH-1):0
PORT M_AXI_ARPROT = ARPROT, BUS = M_AXI, DIR = O, VEC = [2:0]
PORT M_AXI_ARVALID = ARVALID, BUS = M_AXI, DIR = O
PORT M_AXI_ARREADY = ARREADY, BUS = M_AXI, DIR = I
PORT M_AXI_RDATA = RDATA, BUS = M_AXI, DIR = I, VEC = [(C_M_AXI_DATA_WIDTH-1):0]
PORT M_AXI_RRESP = RRESP, BUS = M_AXI, DIR = I, VEC = [1:0]
PORT M_AXI_RVALID = RVALID, BUS = M_AXI, DIR = I
PORT M_AXI_RREADY = RREADY, BUS = M_AXI, DIR = O

## My Ports
PORT IRQ_DMA = "", DIR=I
END
